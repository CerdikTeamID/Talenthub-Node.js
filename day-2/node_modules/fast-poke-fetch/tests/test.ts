import { Pokemon, PokeItem, PokeMove } from '../src/index';
import { describe, test, expect } from '@jest/globals';
import NodeCache from 'node-cache'; // Import the NodeCache type

describe('API calls', () => {
  let sharedCache: NodeCache; // Declare a shared cache variable with the NodeCache type

  beforeEach(() => {
    sharedCache = new NodeCache(); // Initialize the shared cache
  });

  test('should return status code 200', async () => {
    const response = await fetch('https://pokeapi.co/api/v2');
    expect(response.status).toBe(200);
  });
  
  test('should fetch Pokémon data', async () => {
    const pokemonData = await Pokemon('pikachu');
    if ('name' in pokemonData) {
      expect(pokemonData.name).toBe('pikachu');
      expect(pokemonData.height).toBe(4);
    } else {
      throw new Error('Error fetching Pokémon data');
    }
  });

  test('should return an error if Pokémon data is not found', async () => {
    const pokemonData = await Pokemon('notapokemon');
    if ('error' in pokemonData) {
      expect(pokemonData.error).toBe(true);
      expect(pokemonData.message).toBe('An error occurred while fetching data');
    } else {
      throw new Error('Error fetching Pokémon data');
    }
  });

  test('should fetch item data', async () => {
    const itemData = await PokeItem('potion');
    if ('name' in itemData) {
      expect(itemData.name).toBe('potion');
      expect(itemData.effect_entries).toBeDefined();
      expect(itemData.sprites).toBeDefined();
    } else {
      throw new Error('Error fetching item data');
    }
  });

  test('should fetch move data', async () => {
    const moveData = await PokeMove('tackle');
    if ('name' in moveData) {
      expect(moveData.name).toBe('tackle');
      expect(moveData.pp).toBe(35);
      expect(moveData.effect_entries).toBeDefined();
    } else {
      throw new Error('Error fetching move data');
    }
  });

  test('should fetch Pokémon data and cache it', async () => {
    // Fetch the data for Charmander the first time
    const firstPokemonData = await Pokemon('charmander', sharedCache);
    if ('name' in firstPokemonData) {
      expect(firstPokemonData.name).toBe('charmander');
      expect(firstPokemonData.height).toBe(6);
    } else {
      throw new Error('Error fetching Pokémon data');
    }

    // Fetch the data for Charmander the second time
    const cachedData = sharedCache.get('charmander')
    expect(cachedData).toBeDefined();

    const secondPokemonData = await Pokemon('charmander', sharedCache);
    if ('name' in secondPokemonData) {
      // Ensure that the data is the same as the first fetch
      expect(secondPokemonData.name).toBe('charmander');
      expect(secondPokemonData.height).toBe(6);
    } else {
      throw new Error('Error fetching Pokémon data from cache');
    }
  });
});
