import axios from 'axios';
import NodeCache = require('node-cache');
const cache = new NodeCache({ stdTTL: 900, checkperiod: 300 });
const baseUrl = 'https://pokeapi.co/api/v2';

interface Sprites {
  front_shiny: string;
}

interface PokemonData {
  id: number;
  name: string;
  height: number;
  weight: number;
  types: string[];
  abilities: string[];
  sprites: Sprites;
}

interface MoveData {
  id: number;
  name: string;
  pp: number;
  effect_entries: {
    effect: string;
    short_effect: string;
  }[];
}

interface ItemData {
  id: number;
  name: string;
  effect_entries: {
    effect: string;
    short_effect: string;
  }[];
  sprites: Sprites;
}

interface ErrorData {
  error: true;
  message: string;
}

interface RawPokemonType {
  slot: number;
  type: {
    name: string;
  };
}

interface RawPokemonAbility {
  ability: {
    name: string;
  };
}

interface RawPokemonData {
  id: number;
  name: string;
  height: number;
  weight: number;
  types: RawPokemonType[];
  abilities: RawPokemonAbility[];
  sprites: Sprites;
}

const isRawPokemonData = (data: any): data is RawPokemonData => {
  return (
    'id' in data && 
    'name' in data && 
    'types' in data && 
    Array.isArray(data.types) && 
    data.types.every((t: any) => 'type' in t && 'name' in t.type) &&
    'abilities' in data &&
    Array.isArray(data.abilities) &&
    data.abilities.every((a: any) => 'ability' in a && 'name' in a.ability) && 
    'sprites' in data
  );
};

const isMoveData = (data: any): data is MoveData => {
  return 'id' in data && 'name' in data && 'pp' in data && 'effect_entries' in data;
};

const isItemData = (data: any): data is ItemData => {
  return 'id' in data && 'name' in data && 'effect_entries' in data && 'sprites' in data;
};

const fetchData = async (url: string) => {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    const errorData: ErrorData = {
      error: true,
      message: 'An error occurred while fetching data',
    };
    return errorData;
  }
};

const Pokemon = async (pokemonName: string, cache: NodeCache = new NodeCache()): Promise<PokemonData | ErrorData> => {
  // Check for cached data
  const cachedData = cache.get(pokemonName) as PokemonData | ErrorData;
  if (cachedData) {
    return cachedData;
  }
  // If not cached, fetch data
  const data = await fetchData(`${baseUrl}/pokemon/${pokemonName}`);
  if (isRawPokemonData(data)) {
    const types = data.types.map(t => t.type.name);  
    const abilities = data.abilities.map(a => a.ability.name); 
    const frontShinySprite = data.sprites.front_shiny;

    const simplifiedData: PokemonData = {
      id: data.id,
      name: data.name,
      height: data.height,
      weight: data.weight,
      types,
      abilities,
      sprites: { front_shiny: frontShinySprite },
    };

    // Cache data
    cache.set(pokemonName, simplifiedData);
    return simplifiedData;
  } else {
    return {
      error: true,
      message: 'An error occurred while fetching data',
    };
  }
};

const PokeItem = async (itemName: string, cache: NodeCache = new NodeCache()): Promise<ItemData | ErrorData> => {
  // Check for cached data
  const cachedData = cache.get(itemName) as ItemData | ErrorData;
  if (cachedData) {
    return cachedData;
  }
  // If not cached, fetch data
  const data = await fetchData(`${baseUrl}/item/${itemName}`);
  if (isItemData(data)) {
    const itemData: ItemData = {
      id: data.id,
      name: data.name,
      effect_entries: data.effect_entries,
      sprites: data.sprites,
    };

    // Cache data
    cache.set(itemName, itemData);
    return itemData;
  } else {
    return {
      error: true,
      message: 'An error occurred while fetching data',
    };
  }
};


const PokeMove = async (moveName: string, cache: NodeCache = new NodeCache()): Promise<MoveData | ErrorData> => {
  // Check for cached data
  const cachedData = cache.get(moveName) as MoveData | ErrorData;;
  if (cachedData) {
    return cachedData;
  }

  // If not cached, fetch data
  const data = await fetchData(`${baseUrl}/move/${moveName}`);
  if (isMoveData(data)) {
    const moveData: MoveData = {
      id: data.id,
      name: data.name,
      pp: data.pp,
      effect_entries: data.effect_entries,
    };

    // Cache data
    cache.set(moveName, moveData);
    return moveData;
  } else {
    return {
      error: true,
      message: 'An error occurred while fetching data',
    };
  }
};

export { Pokemon, PokeItem, PokeMove };